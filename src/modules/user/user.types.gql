type User {
  id: Int!
  firstName: String!
  lastName: String!
  email: String!
  password: String
  role: Role!
  currentPoints: Int
  targetPoints: Int
  region: Region
  active: Boolean!
  emailConfirmed: Boolean!
  orders: [Order]
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  role: Role!
  targetPoints: Int
  region: Region
}

input UpdateUserInput {
  firstName: String
  lastName: String
  email: String
  role: Role
  currentPoints: Int
  targetPoints: Int
  region: Region
  active: Boolean
  emailConfirmed: Boolean
}

type UsersList implements Pagination {
  users: [User]!
  page: Int!
  perPage: Int!
  total: Int!
}

type Query {
  getUser(id: Int!): User
  listUsers(page: Int!, perPage: Int!): UsersList!
  searchUser(searchQuery: String!): [User]!
}

type Mutation {
  createUser(userInfo: CreateUserInput!): User!
  updateUser(id: Int!, userInfo: UpdateUserInput!): Boolean!
  deleteUser(id: Int!): Boolean!
  restoreUser(id: Int!): Boolean!
}
