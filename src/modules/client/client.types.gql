type Client {
  id: Int!
  name: String!
  active: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ClientsList implements Pagination {
  clients: [Client]!
  page: Int!
  perPage: Int!
  total: Int!
}

input ClientFiles {
  ID: File!
  BirthCetificate: File!
  ProofOfResidancy: File!
  MinesLicense: File
  SignalFile: File!
  CertificateOfProperty: File!
  TaxesCard: File!
  C20Certificate: File!
  BankStatement: File!
  PurchaseOrder: File!
  ClientForm: File!
}

input CreateClientInput {
  name: String!
  files: ClientFiles!
}

input UpdateClientInput {
  name: String
  files: ClientFiles
  active: Boolean
}

type Query {
  listClients(page: Int!, perPage: Int!): ClientsList!
  getClient(id: ID!): Client
}

type Mutation {
  createClient(clientInfo: CreateClientInput!): Int!
  updateClient(id: ID!, clientInfo: UpdateClientInput!): Boolean!
  deleteClient(id: ID!): Boolean!
}
